<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
mybatis-3-mapper.dtd 头部的文档声明，验证当前文档的正确性
namespace属性：指定当前映射器的命名空间
-->
<!--<mapper namespace="test">-->
<!--    &lt;!&ndash;-->
<!--    select标签：内部指定查询SQL语句-->
<!--    id属性：SQL语句的唯一标识符-->
<!-- resultType属性：当前查询语句的返回值-->
<!--    &ndash;&gt;-->
<!--    <select id="findAll" resultType="com.hero.pojo.User">-->
<!--        select * from user;-->
<!--    </select>-->
<!--    <select id="findById" parameterType="int" resultType="com.hero.pojo.User">-->
<!--        select *-->
<!--        from user where id=#{id};-->
<!--    </select>-->
<!--    <select id="findByUsername01" parameterType="string" resultType="com.hero.pojo.User">-->
<!--        select *-->
<!--        from user where username like #{username};-->
<!--    </select>-->
<!--</mapper>-->

<mapper namespace="com.hero.mapper.UserMapper">
    <!-- 根据id查询用户信息 -->
    <select id="findById" parameterType="int" resultType="com.hero.pojo.User">
        select *
        from user where id=#{id};
    </select>

    <!-- 根据用户名查询用户信息
    parameterType属性值：1基本数据类型及其包装类，2字符串，3pojo实体类，4别名，5pojo实体类包装类
    #{}，取值可以通过点的形式取出对象中对象的成员变量值
    -->
    <select id="findByUsername" parameterType="com.hero.pojo.QueryVo" resultType="com.hero.pojo.User">
        select *
        from user where username=#{user.username};
    </select>

    <!--
    查询用户总记录数
    resultType属性值：1、pojo实体类-返回实体类，返回集合均可。2、基本数据类型及其包装类...
    -->
    <select id="countUsers" resultType="int">
        select count(*)
        from user;
    </select>

    <!--
    根据用户名和性别查询用户信息
    -->
    <select id="findUserByWhere" parameterType="com.hero.pojo.User" resultType="com.hero.pojo.User">
        select *
        from user
        <!--
          where标签作用：自动生成where，去除and关键词
          -->
        <where>
            <!--
              if标签的作用：根据条件拼接SQL语句
              test属性值：判断条件，为true时执行，false不执行
              -->
            <if test="username!=null and username!=''">
                and username like #{username}
            </if>
            <if test="sex!=null and sex !=''">
                and sex=#{sex};
            </if>
        </where>

    </select>

    <!--
    根据用户名和性别查询用户信息
    -->
<!--    <select id="findUserByWhere" parameterType="com.hero.pojo.User" resultType="com.hero.pojo.User">-->
<!--        select *-->
<!--        from user where username like #{username} and sex=#{sex};-->
<!--    </select>-->


    <!--
    更新用户信息
    -->
<!--    <update id="update" parameterType="com.hero.pojo.User">-->
<!--        update user-->
<!--        set username = #{username},sex=#{sex}-->
<!--        where id=#{id};-->
<!--    </update>-->

    <!--
    更新用户信息
    -->
    <update id="update" parameterType="com.hero.pojo.User">
        update user
        <!--
          <set>标签作用：自动生成set，去除修改条件后的逗号分隔符
          -->
        <set>
            <if test="username!=null and username!=''">
                username = #{username},
            </if>
            <if test="sex!=null and sex!=''">
                sex=#{sex},
            </if>
        </set>
        where id=#{id};
    </update>

    <!--
    <sql>标签作用：抽取公共SQL语句
    id属性：设置公共SQL语句唯一标识
    -->
    <sql id="userSql">
        select id, username, birthday, sex, address
    </sql>
    <!--
    根据多个id查询用户信息
    -->
    <select id="findUserByIds" parameterType="list" resultType="com.hero.pojo.User">
        <include refid="userSql"/>
        from user
        where id in
        <!--
        <foreach>标签作用：遍历查询list集合参数，拼接SQL语句
        collection属性：指定遍历的集合。如果遍历的是List集合写list，如果遍历的是普通数组则写array
        item属性：定义一个变量接收每个元素，可以随便写
        separator属性：设置元素之间的分隔符
        open属性：设置开始部分SQL语句
        close属性：设置结束部分SQL语句
        -->
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>


    <!--
自定义结果映射
-->
    <resultMap id="findAllResultMap" type="com.hero.pojo.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <!--
        一对多映射
        <collection>标签作用：映射user对象中的账户信息list集合数据
        property属性：设置user对象中的成员变量，映射对象中的accounts是list集合
        ofType属性：成员变量list集合内元素的数据类型
        -->
        <collection property="accounts" ofType="account">
            <!--映射主键id-->
            <id property="id" column="aid"/>
            <!--映射普通成员变量-->
            <result property="uid" column="uid"/>
            <result property="money" column="money"/>
        </collection>
    </resultMap>
    <!--
    查询所有用户信息，同时关联查询出该用户所有账户信息
    -->
    <select id="findAll" resultMap="findAllResultMap">
        select user.*,a.id aid,a.uid,a.money
        from user left join account a on user.id = a.uid;
    </select>
</mapper>